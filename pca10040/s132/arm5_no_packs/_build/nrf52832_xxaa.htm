<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Mar 25 14:18:45 2021
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
inv_device_icm20948_poll &rArr; inv_icm20948_poll_sensor &rArr; inv_icm20948_updateTs &rArr; inv_icm20948_fifo_swmirror &rArr; extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[c6]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[81]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[82]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[12d]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12d]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">RADIO_IRQHandler</a> from time_sync.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_twim.o(.constdata)
 <LI><a href="#[f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI3_EGU3_IRQHandler</a> from time_sync.o(i.SWI3_EGU3_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[18]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from nrfx_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER4_IRQHandler</a> from nrfx_timer.o(i.TIMER4_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[3c]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[47]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[75]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from usr_ble.o(sdh_ble_observers1)
 <LI><a href="#[71]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[72]">ble_evt_handler</a> from bsp_btn_ble.o(i.ble_evt_handler) referenced 2 times from bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[78]">ble_evt_handler</a> from usr_ble.o(i.ble_evt_handler) referenced from usr_ble.o(sdh_ble_observers3)
 <LI><a href="#[76]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from usr_ble.o(sdh_ble_observers2)
 <LI><a href="#[53]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[4d]">bsp_event_handler</a> from usr_ble.o(i.bsp_event_handler) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[3a]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[42]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[56]">compare_func</a> from app_timer2.o(i.compare_func) referenced from app_timer2.o(.constdata)
 <LI><a href="#[52]">conn_params_error_handler</a> from usr_ble.o(i.conn_params_error_handler) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[41]">data_handler</a> from deviceicm20948.o(i.data_handler) referenced from deviceicm20948.o(i.inv_device_icm20948_poll)
 <LI><a href="#[36]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[34]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3d]">gatt_evt_handler</a> from usr_ble.o(i.gatt_evt_handler) referenced from usr_ble.o(i.gatt_init)
 <LI><a href="#[35]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[3e]">gpiote_evt_handler</a> from imu.o(i.gpiote_evt_handler) referenced from usr_gpio.o(i.gpio_init)
 <LI><a href="#[3f]">gpiote_evt_sceduled</a> from imu.o(i.gpiote_evt_sceduled) referenced from imu.o(i.gpiote_evt_handler)
 <LI><a href="#[6f]">host_serif_read_reg_legacy</a> from deviceicm20948.o(i.host_serif_read_reg_legacy) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[70]">host_serif_write_reg_legacy</a> from deviceicm20948.o(i.host_serif_write_reg_legacy) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[62]">inv_device_icm20948_cleanup</a> from deviceicm20948.o(i.inv_device_icm20948_cleanup) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[67]">inv_device_icm20948_enable_sensor</a> from deviceicm20948.o(i.inv_device_icm20948_enable_sensor) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[6c]">inv_device_icm20948_get_sensor_config</a> from deviceicm20948.o(i.inv_device_icm20948_get_sensor_config) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[63]">inv_device_icm20948_load</a> from deviceicm20948.o(i.inv_device_icm20948_load) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[66]">inv_device_icm20948_ping_sensor</a> from deviceicm20948.o(i.inv_device_icm20948_ping_sensor) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[64]">inv_device_icm20948_poll</a> from deviceicm20948.o(i.inv_device_icm20948_poll) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[6e]">inv_device_icm20948_read_mems_register</a> from deviceicm20948.o(i.inv_device_icm20948_read_mems_register) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[60]">inv_device_icm20948_reset</a> from deviceicm20948.o(i.inv_device_icm20948_reset) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[65]">inv_device_icm20948_self_test</a> from deviceicm20948.o(i.inv_device_icm20948_self_test) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[6b]">inv_device_icm20948_set_sensor_config</a> from deviceicm20948.o(i.inv_device_icm20948_set_sensor_config) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[6a]">inv_device_icm20948_set_sensor_mounting_matrix</a> from deviceicm20948.o(i.inv_device_icm20948_set_sensor_mounting_matrix) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[68]">inv_device_icm20948_set_sensor_period_us</a> from deviceicm20948.o(i.inv_device_icm20948_set_sensor_period_us) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[69]">inv_device_icm20948_set_sensor_timeout</a> from deviceicm20948.o(i.inv_device_icm20948_set_sensor_timeout) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[61]">inv_device_icm20948_setup</a> from deviceicm20948.o(i.inv_device_icm20948_setup) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[5f]">inv_device_icm20948_whoami</a> from deviceicm20948.o(i.inv_device_icm20948_whoami) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[6d]">inv_device_icm20948_write_mems_register</a> from deviceicm20948.o(i.inv_device_icm20948_write_mems_register) referenced from deviceicm20948.o(.constdata)
 <LI><a href="#[3b]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[31]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[40]">msg_printer</a> from imu.o(i.msg_printer) referenced from imu.o(i.imu_init)
 <LI><a href="#[5e]">my_adapter_register_interrupt_callback</a> from imu.o(i.my_adapter_register_interrupt_callback) referenced from imu.o(.constdata)
 <LI><a href="#[5b]">my_serif_close_adapter</a> from imu.o(i.my_serif_close_adapter) referenced from imu.o(.constdata)
 <LI><a href="#[5a]">my_serif_open_adapter</a> from imu.o(i.my_serif_open_adapter) referenced from imu.o(.constdata)
 <LI><a href="#[5c]">my_serif_open_read_reg</a> from imu.o(i.my_serif_open_read_reg) referenced from imu.o(.constdata)
 <LI><a href="#[5d]">my_serif_open_write_reg</a> from imu.o(i.my_serif_open_write_reg) referenced from imu.o(.constdata)
 <LI><a href="#[74]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from usr_ble.o(sdh_ble_observers1)
 <LI><a href="#[77]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from usr_ble.o(sdh_ble_observers2)
 <LI><a href="#[59]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[58]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[57]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[4e]">nrf_qwr_error_handler</a> from usr_ble.o(i.nrf_qwr_error_handler) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[7b]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[7c]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[54]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[55]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[4f]">nus_data_handler</a> from usr_ble.o(i.nus_data_handler) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[50]">on_adv_evt</a> from usr_ble.o(i.on_adv_evt) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[51]">on_conn_params_evt</a> from usr_ble.o(i.on_conn_params_evt) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[4a]">radio_callback</a> from time_sync.o(i.radio_callback) referenced from time_sync.o(i.ts_enable)
 <LI><a href="#[37]">rtc_irq</a> from app_timer2.o(i.rtc_irq) referenced from app_timer2.o(i.app_timer_init)
 <LI><a href="#[7d]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[1]">sensor_event_cb</a> from imu.o(i.sensor_event_cb) referenced 2 times from imu.o(.data)
 <LI><a href="#[46]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[79]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[48]">timer_datasend_event_handler</a> from usr_tmr.o(i.timer_datasend_event_handler) referenced from usr_tmr.o(i.timer_datasend_init)
 <LI><a href="#[49]">timer_event_handler</a> from usr_tmr.o(i.timer_event_handler) referenced from usr_tmr.o(i.timer_init)
 <LI><a href="#[7a]">ts_on_sys_evt</a> from time_sync.o(i.ts_on_sys_evt) referenced from time_sync.o(sdh_soc_observers0)
 <LI><a href="#[4b]">twi_handler</a> from usr_twi.o(i.twi_handler) referenced from usr_twi.o(i.twi_open)
 <LI><a href="#[43]">twim_evt_handler</a> from nrf_drv_twi.o(i.twim_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[4c]">uart_event_handle</a> from usr_ble.o(i.uart_event_handle) referenced from usr_ble.o(i.usr_ble_init)
 <LI><a href="#[38]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[45]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[44]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[39]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2e3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2e5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2e6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2e7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2e8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[80]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_on_sys_evt
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_begin_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_offset_compensate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_callback
</UL>

<P><STRONG><a name="[245]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[81]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[248]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[82]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[2e9]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text), UNUSED)

<P><STRONG><a name="[24e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[24f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[24d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[2ea]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[24c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[251]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[2eb]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2ed]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2ee]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_qfix_fxp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2ef]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[2f0]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event_data
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_init
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_pop
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_base_control_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_matrix
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init2
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
</UL>

<P><STRONG><a name="[2f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[26c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[1f3]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[a9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23e]"></a>IMU_data_get</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, imu.o(i.IMU_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, time_sync.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RADIO_IRQHandler &rArr; sync_timer_offset_compensate &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_offset_compensate
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[a1]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, time_sync.o(i.SWI3_EGU3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI3_EGU3_IRQHandler &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 754 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER4_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[23b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2fd]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b3]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[ad]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[b2]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[b5]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_matrix_to_quat_flt
</UL>

<P><STRONG><a name="[b1]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[b0]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[b4]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[ae]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[2fe]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2ff]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[300]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[af]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[2c2]"></a>activityName</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, imu.o(i.activityName))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
</UL>

<P><STRONG><a name="[be]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[c0]"></a>app_button_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[47]"></a>app_error_fault_handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[c8]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_printf_custom
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_evt_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_open
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_button_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[c9]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>

<P><STRONG><a name="[e0]"></a>app_fifo_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[cb]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[cd]"></a>app_sched_event_put</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_evt_handler
</UL>

<P><STRONG><a name="[d1]"></a>app_sched_execute</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23a]"></a>app_sched_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.app_timer_cnt_get))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[c4]"></a>app_timer_create</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer2.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[d4]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = app_timer_init &rArr; drv_rtc_init &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[d9]"></a>app_timer_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[dc]"></a>app_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_timer2.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_stop &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[dd]"></a>app_uart_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[df]"></a>app_uart_init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[e3]"></a>app_uart_put</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[ce]"></a>app_util_critical_region_enter</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[d0]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[ed]"></a>blcm_link_ctx_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[ef]"></a>ble_advdata_encode</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[f7]"></a>ble_advdata_parse</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[f8]"></a>ble_advdata_search</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[2e0]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[f9]"></a>ble_advertising_init</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[75]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[fc]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[fb]"></a>ble_advertising_start</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[101]"></a>ble_conn_params_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[ee]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[102]"></a>ble_conn_state_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[110]"></a>ble_nus_data_send</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_printf_custom
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[111]"></a>ble_nus_init</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[76]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[105]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[2e2]"></a>bsp_board_button_idx_to_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_idx_to_pin))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_button_cfg
</UL>

<P><STRONG><a name="[121]"></a>bsp_board_button_state_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[115]"></a>bsp_board_init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_board_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[bd]"></a>bsp_board_led_invert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
</UL>

<P><STRONG><a name="[118]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[11a]"></a>bsp_board_led_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[128]"></a>bsp_board_led_state_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[117]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[11b]"></a>bsp_board_leds_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_on
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[120]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[11c]"></a>bsp_btn_ble_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_init &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[11e]"></a>bsp_btn_ble_sleep_mode_prepare</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.bsp_btn_ble_sleep_mode_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_btn_ble_sleep_mode_prepare &rArr; bsp_wakeup_button_enable &rArr; wakeup_button_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>

<P><STRONG><a name="[11d]"></a>bsp_button_is_pressed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[4d]"></a>bsp_event_handler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, usr_ble.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = bsp_event_handler &rArr; sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_tx_stop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_tx_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[bc]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[10e]"></a>bsp_indication_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[126]"></a>bsp_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[11f]"></a>bsp_wakeup_button_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.bsp_wakeup_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_wakeup_button_enable &rArr; wakeup_button_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_button_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
</UL>

<P><STRONG><a name="[27a]"></a>buffer_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[112]"></a>characteristic_add</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[10a]"></a>conn_handle_list_get</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_handle_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[143]"></a>dmp_icm20948_get_bias_acc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_get_bias_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dmp_icm20948_get_bias_acc &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_big8_to_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_acc_bias
</UL>

<P><STRONG><a name="[146]"></a>dmp_icm20948_get_bias_cmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_get_bias_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dmp_icm20948_get_bias_cmp &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_big8_to_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_mag_bias
</UL>

<P><STRONG><a name="[147]"></a>dmp_icm20948_get_bias_gyr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_get_bias_gyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dmp_icm20948_get_bias_gyr &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_big8_to_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_gyr_bias
</UL>

<P><STRONG><a name="[148]"></a>dmp_icm20948_get_pedometer_num_of_steps</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_get_pedometer_num_of_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_icm20948_get_pedometer_num_of_steps &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[149]"></a>dmp_icm20948_reset_control_registers</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_reset_control_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_reset_control_registers &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[14b]"></a>dmp_icm20948_set_B2S_matrix</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_B2S_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_B2S_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_matrix
</UL>

<P><STRONG><a name="[14d]"></a>dmp_icm20948_set_FIFO_watermark</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_FIFO_watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_FIFO_watermark &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[14f]"></a>dmp_icm20948_set_accel_cal_params</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_accel_cal_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_accel_cal_params
</UL>

<P><STRONG><a name="[150]"></a>dmp_icm20948_set_accel_feedback_gain</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_accel_feedback_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_accel_feedback_gain &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_accel_quaternion_gain
</UL>

<P><STRONG><a name="[151]"></a>dmp_icm20948_set_accel_fsr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_accel_fsr &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_fullscale
</UL>

<P><STRONG><a name="[152]"></a>dmp_icm20948_set_accel_scale2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_accel_scale2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_accel_scale2 &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_fullscale
</UL>

<P><STRONG><a name="[153]"></a>dmp_icm20948_set_b2s_rate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_b2s_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_b2s_rate &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[154]"></a>dmp_icm20948_set_bac_rate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_bac_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_bac_rate &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[155]"></a>dmp_icm20948_set_batchmode_params</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_batchmode_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_icm20948_set_batchmode_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_timeout_ms
</UL>

<P><STRONG><a name="[156]"></a>dmp_icm20948_set_bias_acc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_bias_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_bias_acc &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_acc_bias
</UL>

<P><STRONG><a name="[157]"></a>dmp_icm20948_set_bias_cmp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_bias_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_bias_cmp &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_mag_bias
</UL>

<P><STRONG><a name="[158]"></a>dmp_icm20948_set_bias_gyr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_bias_gyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_bias_gyr &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_gyr_bias
</UL>

<P><STRONG><a name="[159]"></a>dmp_icm20948_set_compass_matrix</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_compass_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_compass_dmp_cal
</UL>

<P><STRONG><a name="[15a]"></a>dmp_icm20948_set_data_interrupt_control</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_data_interrupt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_data_interrupt_control &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[15b]"></a>dmp_icm20948_set_data_output_control1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_data_output_control1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_icm20948_set_data_output_control1 &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[15c]"></a>dmp_icm20948_set_data_output_control2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_data_output_control2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_icm20948_set_data_output_control2 &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_batch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[15d]"></a>dmp_icm20948_set_data_rdy_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_data_rdy_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_data_rdy_status &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[15e]"></a>dmp_icm20948_set_gyro_sf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_gyro_sf &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
</UL>

<P><STRONG><a name="[15f]"></a>dmp_icm20948_set_motion_event_control</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_motion_event_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_icm20948_set_motion_event_control &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[160]"></a>dmp_icm20948_set_ped_y_ratio</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_ped_y_ratio))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_ped_y_ratio &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[94]"></a>dmp_icm20948_set_sensor_rate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, icm20948dmp3driver.o(i.dmp_icm20948_set_sensor_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_icm20948_set_sensor_rate &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
</UL>

<P><STRONG><a name="[2bb]"></a>drv_rtc_compare_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[165]"></a>drv_rtc_compare_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_compare_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[d8]"></a>drv_rtc_compare_set</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_rtc.o(i.drv_rtc_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[d3]"></a>drv_rtc_counter_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>

<P><STRONG><a name="[d6]"></a>drv_rtc_init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_rtc.o(i.drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = drv_rtc_init &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[2cd]"></a>drv_rtc_irq_trigger</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_irq_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[d7]"></a>drv_rtc_overflow_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_enable))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[169]"></a>drv_rtc_overflow_pending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_overflow_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[2bf]"></a>drv_rtc_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_start))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2c0]"></a>drv_rtc_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[16a]"></a>drv_rtc_windowed_compare_set</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, drv_rtc.o(i.drv_rtc_windowed_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[13d]"></a>evt_handle</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, app_button.o(i.evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = evt_handle &rArr; usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_event
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[34]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[183]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[3d]"></a>gatt_evt_handler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usr_ble.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.gatt_init)
</UL>
<P><STRONG><a name="[171]"></a>gatt_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usr_ble.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = gatt_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[176]"></a>gpio_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usr_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gpio_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>gpiote_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, imu.o(i.gpiote_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = gpiote_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_gpio.o(i.gpio_init)
</UL>
<P><STRONG><a name="[3f]"></a>gpiote_evt_sceduled</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, imu.o(i.gpiote_evt_sceduled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpiote_evt_sceduled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(i.gpiote_evt_handler)
</UL>
<P><STRONG><a name="[17b]"></a>i2c_read_bytes</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usr_twi.o(i.i2c_read_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = i2c_read_bytes &rArr; twi_open &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_serif_open_read_reg
</UL>

<P><STRONG><a name="[180]"></a>i2c_write_byte</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usr_twi.o(i.i2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = i2c_write_byte &rArr; twi_open &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_close
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_serif_open_write_reg
</UL>

<P><STRONG><a name="[17e]"></a>idle_state_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usr_ble.o(i.idle_state_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = idle_state_handle &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>

<P><STRONG><a name="[23d]"></a>imu_get_bytes_available</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu.o(i.imu_get_bytes_available))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>imu_init</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, imu.o(i.imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = imu_init &rArr; check_rc &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg_setup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[240]"></a>imu_set_bytes_available</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu.o(i.imu_set_bytes_available))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>inv_device_icm20948_cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = inv_device_icm20948_cleanup &rArr; inv_device_icm20948_enable_sensor &rArr; inv_icm20948_enable_sensor &rArr; inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_soft_reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_ping_sensor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_enable_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_self_test
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>inv_device_icm20948_enable_sensor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_enable_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = inv_device_icm20948_enable_sensor &rArr; inv_icm20948_enable_sensor &rArr; inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_sensor
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_sensortype_2_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>inv_device_icm20948_get_sensor_config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_get_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_device_icm20948_get_sensor_config &rArr; inv_icm20948_get_bias &rArr; inv_icm20948_ctrl_get_mag_bias &rArr; dmp_icm20948_get_bias_cmp &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_lowpower_or_highperformance
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_fsr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_sensortype_2_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>inv_device_icm20948_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, deviceicm20948.o(i.inv_device_icm20948_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_device_icm20948_init &rArr; inv_device_icm20948_init2 &rArr; inv_icm20948_init_structure &rArr; inv_icm20948_base_control_init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[195]"></a>inv_device_icm20948_init2</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, deviceicm20948.o(i.inv_device_icm20948_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_device_icm20948_init2 &rArr; inv_icm20948_init_structure &rArr; inv_icm20948_base_control_init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init_aux_compass
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init
</UL>

<P><STRONG><a name="[197]"></a>inv_device_icm20948_init_aux_compass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deviceicm20948.o(i.inv_device_icm20948_init_aux_compass))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_register_aux_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init2
</UL>

<P><STRONG><a name="[63]"></a>inv_device_icm20948_load</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deviceicm20948.o(i.inv_device_icm20948_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_device_icm20948_load &rArr; inv_icm20948_load &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>inv_device_icm20948_ping_sensor</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, deviceicm20948.o(i.inv_device_icm20948_ping_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_device_icm20948_ping_sensor
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_compass_isconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_self_test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>inv_device_icm20948_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deviceicm20948.o(i.inv_device_icm20948_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = inv_device_icm20948_poll &rArr; inv_icm20948_poll_sensor &rArr; inv_icm20948_updateTs &rArr; inv_icm20948_fifo_swmirror &rArr; extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>inv_device_icm20948_read_mems_register</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deviceicm20948.o(i.inv_device_icm20948_read_mems_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_device_icm20948_read_mems_register &rArr; inv_icm20948_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>inv_device_icm20948_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = inv_device_icm20948_reset &rArr; inv_device_icm20948_cleanup &rArr; inv_device_icm20948_enable_sensor &rArr; inv_icm20948_enable_sensor &rArr; inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_cleanup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>inv_device_icm20948_self_test</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = inv_device_icm20948_self_test &rArr; inv_device_icm20948_reset &rArr; inv_device_icm20948_cleanup &rArr; inv_device_icm20948_enable_sensor &rArr; inv_icm20948_enable_sensor &rArr; inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_ping_sensor
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_cleanup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>inv_device_icm20948_set_sensor_config</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, deviceicm20948.o(i.inv_device_icm20948_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_device_icm20948_set_sensor_config &rArr; inv_icm20948_set_fsr &rArr; inv_icm20948_set_accel_fullscale &rArr; inv_icm20948_set_icm20948_accel_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_lowpower_or_highperformance
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_fsr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_bias
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_sensortype_2_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>inv_device_icm20948_set_sensor_mounting_matrix</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_set_sensor_mounting_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = inv_device_icm20948_set_sensor_mounting_matrix &rArr; inv_icm20948_set_matrix &rArr; inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_matrix
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_sensortype_2_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>inv_device_icm20948_set_sensor_period_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_set_sensor_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = inv_device_icm20948_set_sensor_period_us &rArr; inv_icm20948_set_sensor_period &rArr; inv_icm20948_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_sensor_period
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_sensortype_2_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>inv_device_icm20948_set_sensor_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deviceicm20948.o(i.inv_device_icm20948_set_sensor_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_device_icm20948_set_sensor_timeout &rArr; inv_icm20948_enable_batch_timeout &rArr; inv_icm20948_ctrl_set_batch_timeout_ms &rArr; dmp_icm20948_set_batchmode_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_batch_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>inv_device_icm20948_setup</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, deviceicm20948.o(i.inv_device_icm20948_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inv_device_icm20948_setup &rArr; inv_icm20948_initialize_auxiliary &rArr; inv_icm20948_set_slave_compass_id &rArr; inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_auxiliary
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_scale
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_matrix
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_whoami
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>inv_device_icm20948_whoami</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deviceicm20948.o(i.inv_device_icm20948_whoami))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_device_icm20948_whoami &rArr; inv_icm20948_get_whoami &rArr; inv_icm20948_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_whoami
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>inv_device_icm20948_write_mems_register</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deviceicm20948.o(i.inv_device_icm20948_write_mems_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_device_icm20948_write_mems_register &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>inv_icm20948_allow_lpen_control</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_allow_lpen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_icm20948_allow_lpen_control &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>

<P><STRONG><a name="[205]"></a>inv_icm20948_apply_raw_compass_matrix</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, icm20948auxcompassakm.o(i.inv_icm20948_apply_raw_compass_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_icm20948_apply_raw_compass_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[1fd]"></a>inv_icm20948_augmented_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, icm20948augmented.o(i.inv_icm20948_augmented_init))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
</UL>

<P><STRONG><a name="[1ba]"></a>inv_icm20948_augmented_sensors_get_gravity</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, icm20948augmented.o(i.inv_icm20948_augmented_sensors_get_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_augmented_sensors_get_gravity &rArr; inv_icm20948_convert_compute_scalar_part_fxp &rArr; inv_icm20948_convert_fast_sqrt_fxp &rArr; inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_q_mult_q_qi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_qfix_fxp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_compute_scalar_part_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[215]"></a>inv_icm20948_augmented_sensors_get_linearacceleration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, icm20948augmented.o(i.inv_icm20948_augmented_sensors_get_linearacceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_icm20948_augmented_sensors_get_linearacceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1be]"></a>inv_icm20948_augmented_sensors_get_orientation</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, icm20948augmented.o(i.inv_icm20948_augmented_sensors_get_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_augmented_sensors_get_orientation &rArr; inv_icm20948_convert_compute_scalar_part_fxp &rArr; inv_icm20948_convert_fast_sqrt_fxp &rArr; inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_math_atan2_q15_fxp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_quat_to_col_major_matrix_fxp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_qfix_fxp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_fast_sqrt_fxp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_compute_scalar_part_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1c2]"></a>inv_icm20948_augmented_sensors_set_odr</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, icm20948augmented.o(i.inv_icm20948_augmented_sensors_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_augmented_sensors_set_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
</UL>

<P><STRONG><a name="[1b1]"></a>inv_icm20948_augmented_sensors_update_odr</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, icm20948augmented.o(i.inv_icm20948_augmented_sensors_update_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_augmented_sensors_update_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1c3]"></a>inv_icm20948_base_control_init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, icm20948databasecontrol.o(i.inv_icm20948_base_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_icm20948_base_control_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
</UL>

<P><STRONG><a name="[1c4]"></a>inv_icm20948_check_akm_self_test</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, icm20948auxcompassakm.o(i.inv_icm20948_check_akm_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_icm20948_check_akm_self_test &rArr; inv_icm20948_execute_read_secondary &rArr; inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
</UL>

<P><STRONG><a name="[1c7]"></a>inv_icm20948_compass_dmp_cal</STRONG> (Thumb, 294 bytes, Stack size 136 bytes, icm20948auxcompassakm.o(i.inv_icm20948_compass_dmp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_q30_fxp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_compass_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_matrix
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>

<P><STRONG><a name="[19a]"></a>inv_icm20948_compass_isconnected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icm20948auxcompassakm.o(i.inv_icm20948_compass_isconnected))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_ping_sensor
</UL>

<P><STRONG><a name="[145]"></a>inv_icm20948_convert_big8_to_int32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_big8_to_int32))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_gyr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_cmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_acc
</UL>

<P><STRONG><a name="[1bb]"></a>inv_icm20948_convert_compute_scalar_part_fxp</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_compute_scalar_part_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_icm20948_convert_compute_scalar_part_fxp &rArr; inv_icm20948_convert_fast_sqrt_fxp &rArr; inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_q30_fxp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_fast_sqrt_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_gravity
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_rotation_vector
</UL>

<P><STRONG><a name="[1c9]"></a>inv_icm20948_convert_dmp3_to_body</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_dmp3_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = inv_icm20948_convert_dmp3_to_body &rArr; inv_icm20948_convert_quat_rotate_fxp &rArr; invn_convert_quat_mult_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_quat_rotate_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1c1]"></a>inv_icm20948_convert_fast_sqrt_fxp</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_fast_sqrt_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inv_icm20948_convert_fast_sqrt_fxp &rArr; inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_q30_fxp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_compute_scalar_part_fxp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[1d0]"></a>inv_icm20948_convert_get_highest_bit_position</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_get_highest_bit_position))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_test_limits_and_scale_fxp
</UL>

<P><STRONG><a name="[14e]"></a>inv_icm20948_convert_int16_to_big8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_int16_to_big8))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_sensor_rate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_rdy_status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_interrupt_control
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_batchmode_params
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bac_rate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_b2s_rate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_cal_params
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_FIFO_watermark
</UL>

<P><STRONG><a name="[14c]"></a>inv_icm20948_convert_int32_to_big8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_int32_to_big8))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_ped_y_ratio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_gyr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_cmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_acc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_batchmode_params
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_feedback_gain
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_cal_params
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_compass_matrix
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_B2S_matrix
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_gyro_sf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_scale2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_fsr
</UL>

<P><STRONG><a name="[1cc]"></a>inv_icm20948_convert_matrix_to_quat_flt</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_matrix_to_quat_flt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_icm20948_convert_matrix_to_quat_flt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[1c8]"></a>inv_icm20948_convert_mult_q30_fxp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_mult_q30_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_compass_dmp_cal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_q_mult_q_qi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_fast_sqrt_fxp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_compute_scalar_part_fxp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_quat_mult_fxp
</UL>

<P><STRONG><a name="[1bd]"></a>inv_icm20948_convert_mult_qfix_fxp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_mult_qfix_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_icm20948_convert_mult_qfix_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_gravity
</UL>

<P><STRONG><a name="[1ca]"></a>inv_icm20948_convert_quat_rotate_fxp</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_quat_rotate_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = inv_icm20948_convert_quat_rotate_fxp &rArr; invn_convert_quat_mult_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_quat_mult_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_dmp3_to_body
</UL>

<P><STRONG><a name="[1bf]"></a>inv_icm20948_convert_quat_to_col_major_matrix_fxp</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_quat_to_col_major_matrix_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_convert_quat_to_col_major_matrix_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_mult_q29_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[1cf]"></a>inv_icm20948_convert_rotation_vector</STRONG> (Thumb, 178 bytes, Stack size 44 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_rotation_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = inv_icm20948_convert_rotation_vector &rArr; inv_icm20948_convert_compute_scalar_part_fxp &rArr; inv_icm20948_convert_fast_sqrt_fxp &rArr; inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_q_mult_q_qi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_compute_scalar_part_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1cb]"></a>inv_icm20948_convert_test_limits_and_scale_fxp</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, icm20948dataconverter.o(i.inv_icm20948_convert_test_limits_and_scale_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_icm20948_convert_test_limits_and_scale_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_get_highest_bit_position
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_fast_sqrt_fxp
</UL>

<P><STRONG><a name="[9a]"></a>inv_icm20948_ctrl_androidSensor_enabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_androidSensor_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_activity_classifier
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_update_odr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_set_odr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1af]"></a>inv_icm20948_ctrl_enable_activity_classifier</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_enable_activity_classifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inv_icm20948_ctrl_enable_activity_classifier
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1d1]"></a>inv_icm20948_ctrl_enable_batch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_enable_batch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_icm20948_ctrl_enable_batch &rArr; dmp_icm20948_set_data_output_control2 &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_output_control2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_mode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_batch_timeout
</UL>

<P><STRONG><a name="[1d3]"></a>inv_icm20948_ctrl_enable_sensor</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_enable_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_wakeup_mems
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_prevent_lpen_control
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_compass_availability
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_allow_lpen_control
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_sensor
</UL>

<P><STRONG><a name="[1b0]"></a>inv_icm20948_ctrl_enable_tilt</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_enable_tilt))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1d8]"></a>inv_icm20948_ctrl_get_acc_bias</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_get_acc_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_ctrl_get_acc_bias &rArr; dmp_icm20948_get_bias_acc &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
</UL>

<P><STRONG><a name="[21c]"></a>inv_icm20948_ctrl_get_activitiy_classifier_on_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_get_activitiy_classifier_on_flag))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[136]"></a>inv_icm20948_ctrl_get_batch_mode_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_get_batch_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>

<P><STRONG><a name="[1d9]"></a>inv_icm20948_ctrl_get_gyr_bias</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_get_gyr_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_ctrl_get_gyr_bias &rArr; dmp_icm20948_get_bias_gyr &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_gyr
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
</UL>

<P><STRONG><a name="[1da]"></a>inv_icm20948_ctrl_get_mag_bias</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_get_mag_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_ctrl_get_mag_bias &rArr; dmp_icm20948_get_bias_cmp &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
</UL>

<P><STRONG><a name="[1db]"></a>inv_icm20948_ctrl_set_acc_bias</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_acc_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_ctrl_set_acc_bias &rArr; dmp_icm20948_set_bias_acc &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_bias
</UL>

<P><STRONG><a name="[1dc]"></a>inv_icm20948_ctrl_set_accel_cal_params</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_accel_cal_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_cal_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[1dd]"></a>inv_icm20948_ctrl_set_accel_quaternion_gain</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_accel_quaternion_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_icm20948_ctrl_set_accel_quaternion_gain &rArr; dmp_icm20948_set_accel_feedback_gain &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_feedback_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[1d2]"></a>inv_icm20948_ctrl_set_batch_mode_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_batch_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_batch
</UL>

<P><STRONG><a name="[1de]"></a>inv_icm20948_ctrl_set_batch_timeout_ms</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_batch_timeout_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_icm20948_ctrl_set_batch_timeout_ms &rArr; dmp_icm20948_set_batchmode_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_secondary_divider
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_divider
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_accel_divider
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_batchmode_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_batch_timeout
</UL>

<P><STRONG><a name="[1e1]"></a>inv_icm20948_ctrl_set_gyr_bias</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_gyr_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_ctrl_set_gyr_bias &rArr; dmp_icm20948_set_bias_gyr &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_gyr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_bias
</UL>

<P><STRONG><a name="[1e2]"></a>inv_icm20948_ctrl_set_mag_bias</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.inv_icm20948_ctrl_set_mag_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_ctrl_set_mag_bias &rArr; dmp_icm20948_set_bias_cmp &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_bias
</UL>

<P><STRONG><a name="[214]"></a>inv_icm20948_dmp_get_6quaternion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_6quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[216]"></a>inv_icm20948_dmp_get_9quaternion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_9quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[20f]"></a>inv_icm20948_dmp_get_accel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_accel))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[21a]"></a>inv_icm20948_dmp_get_bac_state</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_bac_state))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[21b]"></a>inv_icm20948_dmp_get_bac_ts</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_bac_ts))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[211]"></a>inv_icm20948_dmp_get_calibrated_compass</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_calibrated_compass))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[20e]"></a>inv_icm20948_dmp_get_calibrated_gyro</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_calibrated_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_icm20948_dmp_get_calibrated_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[21d]"></a>inv_icm20948_dmp_get_flip_pickup_state</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_flip_pickup_state))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[218]"></a>inv_icm20948_dmp_get_gmrvquaternion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_gmrvquaternion))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[20c]"></a>inv_icm20948_dmp_get_gyro_bias</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_gyro_bias))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[213]"></a>inv_icm20948_dmp_get_raw_compass</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_raw_compass))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[20a]"></a>inv_icm20948_dmp_get_raw_gyro</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_dmp_get_raw_gyro))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1a3]"></a>inv_icm20948_enable_batch_timeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_enable_batch_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_enable_batch_timeout &rArr; inv_icm20948_ctrl_set_batch_timeout_ms &rArr; dmp_icm20948_set_batchmode_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_timeout_ms
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_batch
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_timeout
</UL>

<P><STRONG><a name="[1b7]"></a>inv_icm20948_enable_hw_sensors</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_enable_hw_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_enable_hw_sensors &rArr; inv_icm20948_resume_akm &rArr; inv_icm20948_write_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_suspend_akm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_resume_akm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[191]"></a>inv_icm20948_enable_sensor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, icm20948setup.o(i.inv_icm20948_enable_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = inv_icm20948_enable_sensor &rArr; inv_icm20948_ctrl_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_type_2_android_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_enable_sensor
</UL>

<P><STRONG><a name="[1e7]"></a>inv_icm20948_enter_duty_cycle_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, icm20948databasedriver.o(i.inv_icm20948_enter_duty_cycle_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_enter_duty_cycle_mode &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_lowpower_or_highperformance
</UL>

<P><STRONG><a name="[1e8]"></a>inv_icm20948_enter_low_noise_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, icm20948databasedriver.o(i.inv_icm20948_enter_low_noise_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_enter_low_noise_mode &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_lowpower_or_highperformance
</UL>

<P><STRONG><a name="[1c6]"></a>inv_icm20948_execute_read_secondary</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, icm20948auxtransport.o(i.inv_icm20948_execute_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_execute_read_secondary &rArr; inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_stop_channel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_enable_i2c
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_disable_i2c
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_secondary
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
</UL>

<P><STRONG><a name="[1c5]"></a>inv_icm20948_execute_write_secondary</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, icm20948auxtransport.o(i.inv_icm20948_execute_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_icm20948_execute_write_secondary &rArr; inv_icm20948_write_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_secondary
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_stop_channel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_enable_i2c
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_disable_i2c
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
</UL>

<P><STRONG><a name="[1ee]"></a>inv_icm20948_fifo_pop</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = inv_icm20948_fifo_pop &rArr; inv_icm20948_inv_decode_one_ivory_fifo_packet &rArr; inv_icm20948_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_inv_decode_one_ivory_fifo_packet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1f1]"></a>inv_icm20948_fifo_swmirror</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_fifo_swmirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = inv_icm20948_fifo_swmirror &rArr; extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
</UL>

<P><STRONG><a name="[1f2]"></a>inv_icm20948_firmware_load</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, icm20948loadfirmware.o(i.inv_icm20948_firmware_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_load
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_load_firmware
</UL>

<P><STRONG><a name="[210]"></a>inv_icm20948_get_accel_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_get_accel_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1df]"></a>inv_icm20948_get_accel_divider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_accel_divider))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_timeout_ms
</UL>

<P><STRONG><a name="[1f4]"></a>inv_icm20948_get_accel_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_accel_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_fsr
</UL>

<P><STRONG><a name="[194]"></a>inv_icm20948_get_bias</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, icm20948setup.o(i.inv_icm20948_get_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_icm20948_get_bias &rArr; inv_icm20948_ctrl_get_mag_bias &rArr; dmp_icm20948_get_bias_cmp &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_mag_bias
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_gyr_bias
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_acc_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_get_sensor_config
</UL>

<P><STRONG><a name="[21e]"></a>inv_icm20948_get_chip_power_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_chip_power_state))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
</UL>

<P><STRONG><a name="[1d5]"></a>inv_icm20948_get_compass_availability</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_compass_availability))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
</UL>

<P><STRONG><a name="[229]"></a>inv_icm20948_get_dmp_start_address</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948dmp3driver.o(i.inv_icm20948_get_dmp_start_address))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_address
</UL>

<P><STRONG><a name="[192]"></a>inv_icm20948_get_fsr</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, icm20948setup.o(i.inv_icm20948_get_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_get_fsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_get_sensor_config
</UL>

<P><STRONG><a name="[219]"></a>inv_icm20948_get_gmrv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_get_gmrv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[20d]"></a>inv_icm20948_get_gyro_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_get_gyro_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1b4]"></a>inv_icm20948_get_gyro_divider</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_gyro_divider))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_timeout_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1b3]"></a>inv_icm20948_get_gyro_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_gyro_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_bias
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_fsr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_bias
</UL>

<P><STRONG><a name="[193]"></a>inv_icm20948_get_lowpower_or_highperformance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_get_lowpower_or_highperformance))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_get_sensor_config
</UL>

<P><STRONG><a name="[212]"></a>inv_icm20948_get_mag_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_get_mag_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[217]"></a>inv_icm20948_get_rv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_get_rv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1e0]"></a>inv_icm20948_get_secondary_divider</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_get_secondary_divider))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_batch_timeout_ms
</UL>

<P><STRONG><a name="[1f5]"></a>inv_icm20948_get_time_us</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, imu.o(i.inv_icm20948_get_time_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_get_time_us &rArr; nrfx_timer_capture
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_capture
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1a8]"></a>inv_icm20948_get_whoami</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_get_whoami))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_get_whoami &rArr; inv_icm20948_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_whoami
</UL>

<P><STRONG><a name="[1f7]"></a>inv_icm20948_identify_interrupt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_identify_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_identify_interrupt &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1a4]"></a>inv_icm20948_init_matrix</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, icm20948setup.o(i.inv_icm20948_init_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_init_matrix &rArr; inv_icm20948_set_chip_to_body_axis_quaternion &rArr; inv_icm20948_convert_matrix_to_quat_flt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
</UL>

<P><STRONG><a name="[1a7]"></a>inv_icm20948_init_scale</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_init_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_init_scale &rArr; inv_icm20948_set_accel_fullscale &rArr; inv_icm20948_set_icm20948_accel_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_fullscale
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
</UL>

<P><STRONG><a name="[1fb]"></a>inv_icm20948_init_secondary</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, icm20948auxtransport.o(i.inv_icm20948_init_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_icm20948_init_secondary &rArr; inv_icm20948_secondary_stop_channel &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_stop_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>

<P><STRONG><a name="[196]"></a>inv_icm20948_init_structure</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_init_structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_icm20948_init_structure &rArr; inv_icm20948_base_control_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sensor_android_2_sensor_type
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_base_control_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_transport_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init2
</UL>

<P><STRONG><a name="[1a5]"></a>inv_icm20948_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_icm20948_initialize &rArr; inv_icm20948_initialize_lower_driver &rArr; inv_icm20948_load_firmware &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
</UL>

<P><STRONG><a name="[1a6]"></a>inv_icm20948_initialize_auxiliary</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_initialize_auxiliary))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = inv_icm20948_initialize_auxiliary &rArr; inv_icm20948_set_slave_compass_id &rArr; inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
</UL>

<P><STRONG><a name="[1fe]"></a>inv_icm20948_initialize_lower_driver</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, icm20948databasedriver.o(i.inv_icm20948_initialize_lower_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_icm20948_initialize_lower_driver &rArr; inv_icm20948_load_firmware &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_wakeup_mems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_divider
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_divider
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bac_rate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_b2s_rate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_lowpower_or_highperformance
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_load_firmware
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_FIFO_watermark
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_reset_control_registers
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_address
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize
</UL>

<P><STRONG><a name="[1ef]"></a>inv_icm20948_inv_decode_one_ivory_fifo_packet</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_inv_decode_one_ivory_fifo_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_icm20948_inv_decode_one_ivory_fifo_packet &rArr; inv_icm20948_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_apply_raw_compass_matrix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_32bit_elements
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_16bit_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_pop
</UL>

<P><STRONG><a name="[199]"></a>inv_icm20948_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_load &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_load
</UL>

<P><STRONG><a name="[200]"></a>inv_icm20948_load_firmware</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948dmp3driver.o(i.inv_icm20948_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_load_firmware &rArr; inv_icm20948_firmware_load &rArr; inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1c0]"></a>inv_icm20948_math_atan2_q15_fxp</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, icm20948dataconverter.o(i.inv_icm20948_math_atan2_q15_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_icm20948_math_atan2_q15_fxp &rArr; invn_convert_inverse_q15_fxp &rArr; invn_convert_inv_sqrt_q15_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_mult_q15_fxp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_inverse_q15_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[162]"></a>inv_icm20948_mpu_set_FIFO_RST_Diamond</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, icm20948mpufifocontrol.o(i.inv_icm20948_mpu_set_FIFO_RST_Diamond))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
</UL>

<P><STRONG><a name="[19b]"></a>inv_icm20948_poll_sensor</STRONG> (Thumb, 2358 bytes, Stack size 360 bytes, icm20948setup.o(i.inv_icm20948_poll_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = inv_icm20948_poll_sensor &rArr; inv_icm20948_updateTs &rArr; inv_icm20948_fifo_swmirror &rArr; extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_pedometer_num_of_steps
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_mag_bias
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_activitiy_classifier_on_flag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_orientation
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_linearacceleration
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_gravity
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_time_us
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_identify_interrupt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_rv_accuracy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_mag_accuracy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_accuracy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gmrv_accuracy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_accel_accuracy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_pop
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_raw_gyro
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_raw_compass
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_gyro_bias
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_gmrvquaternion
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_flip_pickup_state
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_calibrated_gyro
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_calibrated_compass
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_bac_ts
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_bac_state
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_accel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_9quaternion
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_dmp_get_6quaternion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_rotation_vector
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_quat_rotate_fxp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_dmp3_to_body
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_accel_fullscale
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sensor
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_poll
</UL>

<P><STRONG><a name="[1d6]"></a>inv_icm20948_prevent_lpen_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_prevent_lpen_control))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
</UL>

<P><STRONG><a name="[1bc]"></a>inv_icm20948_q_mult_q_qi</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, icm20948dataconverter.o(i.inv_icm20948_q_mult_q_qi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_q_mult_q_qi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_get_gravity
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_rotation_vector
</UL>

<P><STRONG><a name="[144]"></a>inv_icm20948_read_mems</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, icm20948transport.o(i.inv_icm20948_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_read_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_chip_power_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_pedometer_num_of_steps
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_gyr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_cmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_bias_acc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
</UL>

<P><STRONG><a name="[142]"></a>inv_icm20948_read_mems_reg</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, icm20948transport.o(i.inv_icm20948_read_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_chip_power_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_mpu_set_FIFO_RST_Diamond
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_identify_interrupt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_gyro_fullscale
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_accel_fullscale
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[19c]"></a>inv_icm20948_read_reg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm20948transport.o(i.inv_icm20948_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_whoami
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_read_mems_register
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>

<P><STRONG><a name="[1e9]"></a>inv_icm20948_read_secondary</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, icm20948auxtransport.o(i.inv_icm20948_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_resume_akm
</UL>

<P><STRONG><a name="[198]"></a>inv_icm20948_register_aux_compass</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, icm20948auxcompassakm.o(i.inv_icm20948_register_aux_compass))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_init_aux_compass
</UL>

<P><STRONG><a name="[1e4]"></a>inv_icm20948_resume_akm</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, icm20948auxcompassakm.o(i.inv_icm20948_resume_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_resume_akm &rArr; inv_icm20948_write_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_secondary
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_enable_i2c
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_hw_sensors
</UL>

<P><STRONG><a name="[19d]"></a>inv_icm20948_run_selftest</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, icm20948selftest.o(i.inv_icm20948_run_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = inv_icm20948_run_selftest &rArr; inv_icm20948_check_akm_self_test &rArr; inv_icm20948_execute_read_secondary &rArr; inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_self_test
</UL>

<P><STRONG><a name="[1eb]"></a>inv_icm20948_secondary_disable_i2c</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20948auxtransport.o(i.inv_icm20948_secondary_disable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_secondary_disable_i2c &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_suspend_akm
</UL>

<P><STRONG><a name="[1ea]"></a>inv_icm20948_secondary_enable_i2c</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20948auxtransport.o(i.inv_icm20948_secondary_enable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_secondary_enable_i2c &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_resume_akm
</UL>

<P><STRONG><a name="[223]"></a>inv_icm20948_secondary_set_odr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, icm20948auxtransport.o(i.inv_icm20948_secondary_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_icm20948_secondary_set_odr &rArr; inv_icm20948_set_secondary_divider &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_secondary_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[1ec]"></a>inv_icm20948_secondary_stop_channel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20948auxtransport.o(i.inv_icm20948_secondary_stop_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_secondary_stop_channel &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_secondary
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_suspend_akm
</UL>

<P><STRONG><a name="[1ae]"></a>inv_icm20948_sensor_android_2_sensor_type</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_sensor_android_2_sensor_type))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sensor
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
</UL>

<P><STRONG><a name="[203]"></a>inv_icm20948_set_accel_divider</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, icm20948databasedriver.o(i.inv_icm20948_set_accel_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_set_accel_divider &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1f9]"></a>inv_icm20948_set_accel_fullscale</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, icm20948databasedriver.o(i.inv_icm20948_set_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_icm20948_set_accel_fullscale &rArr; inv_icm20948_set_icm20948_accel_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_scale2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_fsr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_fsr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_scale
</UL>

<P><STRONG><a name="[19f]"></a>inv_icm20948_set_bias</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, icm20948setup.o(i.inv_icm20948_set_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_icm20948_set_bias &rArr; inv_icm20948_ctrl_set_mag_bias &rArr; dmp_icm20948_set_bias_cmp &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_mag_bias
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_gyr_bias
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_acc_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_config
</UL>

<P><STRONG><a name="[1b9]"></a>inv_icm20948_set_chip_power_state</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_set_chip_power_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg_core
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_100us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_wakeup_mems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_allow_lpen_control
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[228]"></a>inv_icm20948_set_chip_to_body</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20948dataconverter.o(i.inv_icm20948_set_chip_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_icm20948_set_chip_to_body
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[1f8]"></a>inv_icm20948_set_chip_to_body_axis_quaternion</STRONG> (Thumb, 230 bytes, Stack size 120 bytes, icm20948dataconverter.o(i.inv_icm20948_set_chip_to_body_axis_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_icm20948_set_chip_to_body_axis_quaternion &rArr; inv_icm20948_convert_matrix_to_quat_flt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_matrix_to_quat_flt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_quat_mult_fxp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_matrix
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_matrix
</UL>

<P><STRONG><a name="[201]"></a>inv_icm20948_set_dmp_address</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_set_dmp_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_icm20948_set_dmp_address &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_dmp_start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[19e]"></a>inv_icm20948_set_fsr</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_set_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_set_fsr &rArr; inv_icm20948_set_accel_fullscale &rArr; inv_icm20948_set_icm20948_accel_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_fullscale
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_config
</UL>

<P><STRONG><a name="[202]"></a>inv_icm20948_set_gyro_divider</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_set_gyro_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_icm20948_set_gyro_divider &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1fa]"></a>inv_icm20948_set_gyro_fullscale</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_set_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_icm20948_set_gyro_fullscale &rArr; inv_icm20948_set_gyro_sf &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_gyro_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_fsr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_scale
</UL>

<P><STRONG><a name="[1b5]"></a>inv_icm20948_set_gyro_sf</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, icm20948databasedriver.o(i.inv_icm20948_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_set_gyro_sf &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_gyro_sf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_fullscale
</UL>

<P><STRONG><a name="[225]"></a>inv_icm20948_set_icm20948_accel_fullscale</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, icm20948databasedriver.o(i.inv_icm20948_set_icm20948_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_set_icm20948_accel_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_fullscale
</UL>

<P><STRONG><a name="[22a]"></a>inv_icm20948_set_icm20948_gyro_fullscale</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, icm20948databasedriver.o(i.inv_icm20948_set_icm20948_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_icm20948_set_icm20948_gyro_fullscale &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_fullscale
</UL>

<P><STRONG><a name="[1a0]"></a>inv_icm20948_set_lowpower_or_highperformance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_set_lowpower_or_highperformance))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_set_lowpower_or_highperformance &rArr; inv_icm20948_enter_low_noise_mode &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_low_noise_mode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_duty_cycle_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1a1]"></a>inv_icm20948_set_matrix</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, icm20948setup.o(i.inv_icm20948_set_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = inv_icm20948_set_matrix &rArr; inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_compass_dmp_cal
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_B2S_matrix
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmpDriver_convertion
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_mounting_matrix
</UL>

<P><STRONG><a name="[22c]"></a>inv_icm20948_set_odr</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, icm20948databasecontrol.o(i.inv_icm20948_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = inv_icm20948_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_prevent_lpen_control
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_divider
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_compass_availability
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_allow_lpen_control
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_set_odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_sensor_period
</UL>

<P><STRONG><a name="[22d]"></a>inv_icm20948_set_secondary</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_set_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_set_secondary &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>

<P><STRONG><a name="[224]"></a>inv_icm20948_set_secondary_divider</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icm20948databasedriver.o(i.inv_icm20948_set_secondary_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_set_secondary_divider &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_set_odr
</UL>

<P><STRONG><a name="[1a2]"></a>inv_icm20948_set_sensor_period</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, icm20948setup.o(i.inv_icm20948_set_sensor_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inv_icm20948_set_sensor_period &rArr; inv_icm20948_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_type_2_android_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_period_us
</UL>

<P><STRONG><a name="[1ff]"></a>inv_icm20948_set_slave_compass_id</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, icm20948databasedriver.o(i.inv_icm20948_set_slave_compass_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = inv_icm20948_set_slave_compass_id &rArr; inv_icm20948_compass_dmp_cal &rArr; dmp_icm20948_set_compass_matrix &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_allow_lpen_control
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_secondary
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_compass_dmp_cal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_auxiliary
</UL>

<P><STRONG><a name="[22e]"></a>inv_icm20948_setup_compass_akm</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, icm20948auxcompassakm.o(i.inv_icm20948_setup_compass_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_icm20948_setup_compass_akm &rArr; inv_icm20948_execute_read_secondary &rArr; inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_suspend_akm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_slave_compass_id
</UL>

<P><STRONG><a name="[227]"></a>inv_icm20948_sleep_100us</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948transport.o(i.inv_icm20948_sleep_100us))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
</UL>

<P><STRONG><a name="[1b6]"></a>inv_icm20948_sleep_mems</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm20948databasedriver.o(i.inv_icm20948_sleep_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_icm20948_sleep_mems &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1ac]"></a>inv_icm20948_sleep_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.inv_icm20948_sleep_us))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_read_secondary
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_soft_reset
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_100us
</UL>

<P><STRONG><a name="[18f]"></a>inv_icm20948_soft_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm20948setup.o(i.inv_icm20948_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_icm20948_soft_reset &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_cleanup
</UL>

<P><STRONG><a name="[1e5]"></a>inv_icm20948_suspend_akm</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, icm20948auxcompassakm.o(i.inv_icm20948_suspend_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_icm20948_suspend_akm &rArr; inv_icm20948_secondary_stop_channel &rArr; inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_stop_channel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_hw_sensors
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
</UL>

<P><STRONG><a name="[1fc]"></a>inv_icm20948_transport_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20948transport.o(i.inv_icm20948_transport_init))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_init_structure
</UL>

<P><STRONG><a name="[1d7]"></a>inv_icm20948_wakeup_mems</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, icm20948databasedriver.o(i.inv_icm20948_wakeup_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_icm20948_wakeup_mems &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[14a]"></a>inv_icm20948_write_mems</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, icm20948transport.o(i.inv_icm20948_write_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_chip_power_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_sensor_rate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_ped_y_ratio
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_motion_event_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_rdy_status
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_output_control2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_output_control1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_interrupt_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_gyr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_cmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bias_acc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_batchmode_params
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bac_rate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_b2s_rate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_feedback_gain
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_cal_params
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_compass_matrix
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_firmware_load
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_B2S_matrix
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_gyro_sf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_scale2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_accel_fsr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_FIFO_watermark
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_reset_control_registers
</UL>

<P><STRONG><a name="[1e3]"></a>inv_icm20948_write_mems_reg</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, icm20948transport.o(i.inv_icm20948_write_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_chip_power_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_wakeup_mems
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_divider
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_divider
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_low_noise_mode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_duty_cycle_mode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_hw_sensors
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_secondary
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_secondary
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_mpu_set_FIFO_RST_Diamond
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_gyro_fullscale
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_address
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[1a9]"></a>inv_icm20948_write_reg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, icm20948transport.o(i.inv_icm20948_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_icm20948_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_write_mems_register
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg_core
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>

<P><STRONG><a name="[1ed]"></a>inv_icm20948_write_secondary</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, icm20948auxtransport.o(i.inv_icm20948_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_icm20948_write_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_execute_write_secondary
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_resume_akm
</UL>

<P><STRONG><a name="[161]"></a>inv_icm20948_write_single_mems_reg</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, icm20948transport.o(i.inv_icm20948_write_single_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_icm20948_write_single_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_chip_power_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_wakeup_mems
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_secondary_divider
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_stop_channel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_enable_i2c
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_disable_i2c
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_check_akm_self_test
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_soft_reset
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_secondary
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_gyro_fullscale
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_icm20948_accel_fullscale
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_initialize_lower_driver
</UL>

<P><STRONG><a name="[226]"></a>inv_icm20948_write_single_mems_reg_core</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, icm20948transport.o(i.inv_icm20948_write_single_mems_reg_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_power_state
</UL>

<P><STRONG><a name="[131]"></a>inv_msg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, message.o(i.inv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_setup
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_self_test
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_reset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event
</UL>

<P><STRONG><a name="[186]"></a>inv_msg_setup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, message.o(i.inv_msg_setup))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[2c1]"></a>inv_sensor_str</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sensor.o(i.inv_sensor_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_sensor_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
</UL>

<P><STRONG><a name="[31]"></a>main</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = main &rArr; usr_ble_init &rArr; sync_timer_button_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_printf_custom
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_bytes_available
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_get_bytes_available
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[181]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[40]"></a>msg_printer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu.o(i.msg_printer))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = msg_printer &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(i.imu_init)
</UL>
<P><STRONG><a name="[5e]"></a>my_adapter_register_interrupt_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.my_adapter_register_interrupt_callback))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>my_serif_close_adapter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.my_serif_close_adapter))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>my_serif_open_adapter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.my_serif_open_adapter))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>my_serif_open_read_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, imu.o(i.my_serif_open_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = my_serif_open_read_reg &rArr; i2c_read_bytes &rArr; twi_open &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>my_serif_open_write_reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, imu.o(i.my_serif_open_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = my_serif_open_write_reg &rArr; i2c_write_byte &rArr; twi_open &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[244]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[246]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[247]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[249]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[10b]"></a>nrf_atflags_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[103]"></a>nrf_atflags_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>

<P><STRONG><a name="[10c]"></a>nrf_atflags_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[238]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[236]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[12b]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[109]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[24b]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[164]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[24a]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[250]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[9e]"></a>nrf_balloc_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_begin_handler
</UL>

<P><STRONG><a name="[a7]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_EGU3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_callback
</UL>

<P><STRONG><a name="[28a]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_init
</UL>

<P><STRONG><a name="[173]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[172]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[74]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[10f]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2df]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[77]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[259]"></a>nrf_drv_clock_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[25e]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[260]"></a>nrf_drv_twi_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_open
</UL>

<P><STRONG><a name="[e2]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[26a]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[12e]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[26b]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[279]"></a>nrf_log_backend_add</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[271]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[272]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[2b4]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[278]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[c6]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_printer
</UL>

<P><STRONG><a name="[27d]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[c7]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_event_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_printer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_button_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_on_sys_evt
</UL>

<P><STRONG><a name="[134]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_on_sys_evt
</UL>

<P><STRONG><a name="[13a]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
</UL>

<P><STRONG><a name="[27f]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_offset_compensate
</UL>

<P><STRONG><a name="[280]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
</UL>

<P><STRONG><a name="[281]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_event_cb
</UL>

<P><STRONG><a name="[276]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[285]"></a>nrf_log_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[243]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[288]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[c5]"></a>nrf_log_panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[275]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[27b]"></a>nrf_memobj_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[289]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[273]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[286]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[277]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[274]"></a>nrf_memobj_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[27c]"></a>nrf_memobj_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[28b]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwr_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[184]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
</UL>

<P><STRONG><a name="[287]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[28e]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[28d]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[28f]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[291]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[a6]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>

<P><STRONG><a name="[28c]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[290]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[2bd]"></a>nrf_sortlist_add</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_sortlist.o(i.nrf_sortlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sortlist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2bc]"></a>nrf_sortlist_peek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_peek))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2c4]"></a>nrf_sortlist_pop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_pop))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>

<P><STRONG><a name="[2cc]"></a>nrf_sortlist_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[296]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[13b]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[25c]"></a>nrfx_clock_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[25a]"></a>nrfx_clock_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[25f]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[bf]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[c3]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[13c]"></a>nrfx_gpiote_in_is_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[c2]"></a>nrfx_gpiote_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[c1]"></a>nrfx_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[2a1]"></a>nrfx_prs_acquire</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[2a3]"></a>nrfx_prs_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
</UL>

<P><STRONG><a name="[1f6]"></a>nrfx_timer_capture</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_capture
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_time_us
</UL>

<P><STRONG><a name="[2c8]"></a>nrfx_timer_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_timer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_event_handler
</UL>

<P><STRONG><a name="[2a4]"></a>nrfx_timer_compare</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[2ca]"></a>nrfx_timer_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
</UL>

<P><STRONG><a name="[2a5]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
</UL>

<P><STRONG><a name="[2a6]"></a>nrfx_timer_init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
</UL>

<P><STRONG><a name="[2a8]"></a>nrfx_twim_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_twim_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_close
</UL>

<P><STRONG><a name="[2d3]"></a>nrfx_twim_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_twim_enable))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_open
</UL>

<P><STRONG><a name="[262]"></a>nrfx_twim_init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nrfx_twim.o(i.nrfx_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[182]"></a>nrfx_twim_tx</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nrfx_twim.o(i.nrfx_twim_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[2a7]"></a>nrfx_twim_uninit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_twim_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_close
</UL>

<P><STRONG><a name="[263]"></a>nrfx_twim_xfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrfx_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[54]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>nrfx_uart_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[267]"></a>nrfx_uart_rx</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[269]"></a>nrfx_uart_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[e5]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[55]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>nrfx_uarte_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[266]"></a>nrfx_uarte_rx</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[268]"></a>nrfx_uarte_tx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[e4]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[23f]"></a>nus_printf_custom</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usr_ble.o(i.nus_printf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = nus_printf_custom &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>timer_datasend_event_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usr_tmr.o(i.timer_datasend_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = timer_datasend_event_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_tmr.o(i.timer_datasend_init)
</UL>
<P><STRONG><a name="[2c9]"></a>timer_datasend_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usr_tmr.o(i.timer_datasend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = timer_datasend_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[49]"></a>timer_event_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usr_tmr.o(i.timer_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = timer_event_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_tmr.o(i.timer_init)
</UL>
<P><STRONG><a name="[2cb]"></a>timer_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usr_tmr.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = timer_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[23c]"></a>timers_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_tmr.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = timers_init &rArr; timer_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_datasend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c7]"></a>ts_enable</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, time_sync.o(i.ts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ts_enable &rArr; ppi_sync_timer_adjust_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_start
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_sync_timer_adjust_configure
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_button_init
</UL>

<P><STRONG><a name="[2c6]"></a>ts_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, time_sync.o(i.ts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ts_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_button_init
</UL>

<P><STRONG><a name="[123]"></a>ts_tx_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, time_sync.o(i.ts_tx_start))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[122]"></a>ts_tx_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time_sync.o(i.ts_tx_stop))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[17f]"></a>twi_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_twi.o(i.twi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = twi_close &rArr; nrfx_twim_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>

<P><STRONG><a name="[4b]"></a>twi_handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usr_twi.o(i.twi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = twi_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_twi.o(i.twi_open)
</UL>
<P><STRONG><a name="[17c]"></a>twi_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usr_twi.o(i.twi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = twi_open &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>

<P><STRONG><a name="[4c]"></a>uart_event_handle</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usr_ble.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = uart_event_handle &rArr; app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[239]"></a>usr_ble_init</STRONG> (Thumb, 452 bytes, Stack size 184 bytes, usr_ble.o(i.usr_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = usr_ble_init &rArr; sync_timer_button_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_timer_button_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[116]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[119]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[3c]"></a>alert_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[53]"></a>bsp_button_event_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>bsp_led_indication</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[3a]"></a>button_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[127]"></a>leds_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = leds_off &rArr; bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[3b]"></a>leds_timer_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[129]"></a>wakeup_button_cfg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp.o(i.wakeup_button_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wakeup_button_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_idx_to_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>

<P><STRONG><a name="[bb]"></a>advertising_buttons_configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[72]"></a>ble_evt_handler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_evt_handler &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[f0]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f3]"></a>conn_int_encode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f4]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f6]"></a>name_encode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f5]"></a>service_data_encode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f1]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[f2]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[2e1]"></a>uuid_list_sized_encode</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[fa]"></a>adv_set_data_size_max_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_set_data_size_max_get))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[fd]"></a>flags_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
</UL>

<P><STRONG><a name="[ff]"></a>phy_is_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[100]"></a>use_whitelist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[73]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[108]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[104]"></a>instance_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[106]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[107]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[39]"></a>update_timeout_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[71]"></a>ble_evt_handler</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[10d]"></a>flag_toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_conn_state.o(i.flag_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[132]"></a>set_security_req</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[139]"></a>data_length_update</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[252]"></a>link_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[253]"></a>on_connected_evt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[256]"></a>on_data_length_update_evt</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[257]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[255]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[254]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = on_exchange_mtu_rsp_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[258]"></a>user_mem_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[113]"></a>on_connect</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[114]"></a>on_write</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[137]"></a>clock_clk_started_notify</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[42]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[25d]"></a>nrf_wdt_started</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[7d]"></a>sd_state_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[79]"></a>soc_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[45]"></a>uart_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[44]"></a>uarte_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[9b]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[2a0]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[29c]"></a>channel_port_alloc</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[298]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[2b3]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[29d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[29a]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[97]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_present_check))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[96]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[29e]"></a>pin_configured_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_configured_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[297]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[29b]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[98]"></a>port_event_handle</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = port_event_handle &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>port_handler_polarity_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[2a2]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[e7]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[26f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[e9]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[e8]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2ad]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2ab]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[2da]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2ae]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2db]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2ac]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[2af]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2dc]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2aa]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[ea]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[18b]"></a>interrupts_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[270]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[ec]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[eb]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2b2]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[18c]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2b1]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[2dd]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[2de]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[2b0]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[2d1]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[2d2]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[261]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[43]"></a>twim_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[2d8]"></a>_NRFX_IRQ_PENDING_CLEAR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_twim.o(i._NRFX_IRQ_PENDING_CLEAR))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[26e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[26d]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_uninit
</UL>

<P><STRONG><a name="[2d4]"></a>nrf_twim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[2d5]"></a>nrf_twim_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[2d9]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[a5]"></a>twim_irq_handler</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, nrfx_twim.o(i.twim_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_list_enable_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_PENDING_CLEAR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>twim_list_enable_handle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrfx_twim.o(i.twim_list_enable_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = twim_list_enable_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[2a9]"></a>twim_xfer</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, nrfx_twim.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_list_enable_handle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>

<P><STRONG><a name="[2d7]"></a>xfer_completeness_check</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nrfx_twim.o(i.xfer_completeness_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xfer_completeness_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[a8]"></a>irq_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[235]"></a>nrf_timer_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[179]"></a>button_get</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, app_button.o(i.button_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = button_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_event
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[36]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = detection_delay_timeout_handler &rArr; evt_handle &rArr; usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[35]"></a>gpiote_event_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpiote_event_handler &rArr; timer_start &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[16c]"></a>state_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_button.o(i.state_set))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
</UL>

<P><STRONG><a name="[13e]"></a>timer_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_button.o(i.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_start &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[16d]"></a>usr_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.usr_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
</UL>

<P><STRONG><a name="[ca]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[cc]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[cf]"></a>next_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[56]"></a>compare_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer2.o(i.compare_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>get_now</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_timer2.o(i.get_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_now
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[37]"></a>rtc_irq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_timer2.o(i.rtc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rtc_irq &rArr; rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(i.app_timer_init)
</UL>
<P><STRONG><a name="[2ba]"></a>rtc_schedule</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app_timer2.o(i.rtc_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2b9]"></a>rtc_update</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_timer2.o(i.rtc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[2be]"></a>sortlist_pop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.sortlist_pop))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[2b7]"></a>timer_expire</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_timer2.o(i.timer_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_expire &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[2b8]"></a>timer_req_process</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_process &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[db]"></a>timer_req_schedule</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[de]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>

<P><STRONG><a name="[e6]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[38]"></a>uart_event_handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[168]"></a>evt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_rtc.o(i.evt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
</UL>

<P><STRONG><a name="[166]"></a>evt_pending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_rtc.o(i.evt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
</UL>

<P><STRONG><a name="[167]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>

<P><STRONG><a name="[16b]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[12d]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[189]"></a>int_print</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[18a]"></a>unsigned_print</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[241]"></a>memobj_op</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[295]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[59]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>serial_tx</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[12a]"></a>buf_prealloc</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[163]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[237]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[12c]"></a>log_skip</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[242]"></a>module_idx_get</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[27e]"></a>std_n</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
</UL>

<P><STRONG><a name="[284]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[282]"></a>prefix_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[a0]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[a2]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a4]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a3]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2c3]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[292]"></a>sdh_request_observer_notify</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[293]"></a>sdh_state_observer_notify</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[294]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[7b]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 86 bytes, Stack size 528 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[7c]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[17d]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usr_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_twi_xfer &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>

<P><STRONG><a name="[178]"></a>nrf_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usr_gpio.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[177]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_gpio.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[133]"></a>check_rc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, imu.o(i.check_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = check_rc &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[17a]"></a>nrf_gpio_pin_toggle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, imu.o(i.nrf_gpio_pin_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_evt_handler
</UL>

<P><STRONG><a name="[188]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imu.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>

<P><STRONG><a name="[1]"></a>sensor_event_cb</STRONG> (Thumb, 686 bytes, Stack size 56 bytes, imu.o(i.sensor_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sensor_event_cb &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_str
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activityName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>build_sensor_event</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, deviceicm20948.o(i.build_sensor_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = build_sensor_event &rArr; build_sensor_event_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_msg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handler
</UL>

<P><STRONG><a name="[130]"></a>build_sensor_event_data</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, deviceicm20948.o(i.build_sensor_event_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = build_sensor_event_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event
</UL>

<P><STRONG><a name="[41]"></a>data_handler</STRONG> (Thumb, 68 bytes, Stack size 120 bytes, deviceicm20948.o(i.data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = data_handler &rArr; build_sensor_event &rArr; build_sensor_event_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idd_driver_2_sensortype
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_sensor_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(i.inv_device_icm20948_poll)
</UL>
<P><STRONG><a name="[6f]"></a>host_serif_read_reg_legacy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, deviceicm20948.o(i.host_serif_read_reg_legacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_serif_read_reg_legacy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>host_serif_write_reg_legacy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, deviceicm20948.o(i.host_serif_write_reg_legacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_serif_write_reg_legacy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> deviceicm20948.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>idd_driver_2_sensortype</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, deviceicm20948.o(i.idd_driver_2_sensortype))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handler
</UL>

<P><STRONG><a name="[190]"></a>idd_sensortype_2_driver</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, deviceicm20948.o(i.idd_sensortype_2_driver))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_period_us
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_mounting_matrix
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_set_sensor_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_get_sensor_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_device_icm20948_enable_sensor
</UL>

<P><STRONG><a name="[93]"></a>DividerRateSet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, icm20948databasecontrol.o(i.DividerRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DividerRateSet &rArr; dmp_icm20948_set_sensor_rate &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_sensor_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[99]"></a>MinDelayGenActual</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, icm20948databasecontrol.o(i.MinDelayGenActual))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
</UL>

<P><STRONG><a name="[232]"></a>SampleRateDividerGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.SampleRateDividerGet))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[174]"></a>getMinDlyAccel</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, icm20948databasecontrol.o(i.getMinDlyAccel))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = getMinDlyAccel &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[175]"></a>getMinDlyGyro</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, icm20948databasecontrol.o(i.getMinDlyGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = getMinDlyGyro &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[231]"></a>get_multiple_56_rate</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.get_multiple_56_rate))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[18d]"></a>inv_convert_androidSensor_to_control</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, icm20948databasecontrol.o(i.inv_convert_androidSensor_to_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_convert_androidSensor_to_control &rArr; inv_reGenerate_sensorControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1ad]"></a>inv_enable_sensor_internal</STRONG> (Thumb, 948 bytes, Stack size 152 bytes, icm20948databasecontrol.o(i.inv_enable_sensor_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_sf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sensor_android_2_sensor_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_fullscale
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_get_gyro_divider
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_hw_sensors
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_ped_y_ratio
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_motion_event_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_rdy_status
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_output_control2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_output_control1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_data_interrupt_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_get_pedometer_num_of_steps
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_tilt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_activity_classifier
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_augmented_sensors_update_odr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
</UL>

<P><STRONG><a name="[18e]"></a>inv_reGenerate_sensorControl</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, icm20948databasecontrol.o(i.inv_reGenerate_sensorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
</UL>

<P><STRONG><a name="[1b2]"></a>inv_set_hw_smplrt_dmp_odrs</STRONG> (Thumb, 880 bytes, Stack size 136 bytes, icm20948databasecontrol.o(i.inv_set_hw_smplrt_dmp_odrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = inv_set_hw_smplrt_dmp_odrs &rArr; inv_icm20948_ctrl_set_accel_cal_params &rArr; dmp_icm20948_set_accel_cal_params &rArr; inv_icm20948_write_mems &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_gyro_divider
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_accel_divider
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_low_noise_mode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enter_duty_cycle_mode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_bac_rate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_icm20948_set_b2s_rate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_accel_quaternion_gain
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_set_accel_cal_params
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_multiple_56_rate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateDividerGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_secondary_set_odr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_androidSensor_enabled
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[1d4]"></a>sensor_needs_compass</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, icm20948databasecontrol.o(i.sensor_needs_compass))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_odr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_enable_sensor
</UL>

<P><STRONG><a name="[233]"></a>invn_convert_inv_sqrt_q15_fxp</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, icm20948dataconverter.o(i.invn_convert_inv_sqrt_q15_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = invn_convert_inv_sqrt_q15_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_mult_q15_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_inverse_q15_fxp
</UL>

<P><STRONG><a name="[207]"></a>invn_convert_inverse_q15_fxp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, icm20948dataconverter.o(i.invn_convert_inverse_q15_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = invn_convert_inverse_q15_fxp &rArr; invn_convert_inv_sqrt_q15_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_mult_q15_fxp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_inv_sqrt_q15_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_math_atan2_q15_fxp
</UL>

<P><STRONG><a name="[208]"></a>invn_convert_mult_q15_fxp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.invn_convert_mult_q15_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_math_atan2_q15_fxp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_inverse_q15_fxp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invn_convert_inv_sqrt_q15_fxp
</UL>

<P><STRONG><a name="[1ce]"></a>invn_convert_mult_q29_fxp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20948dataconverter.o(i.invn_convert_mult_q29_fxp))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_quat_to_col_major_matrix_fxp
</UL>

<P><STRONG><a name="[1cd]"></a>invn_convert_quat_mult_fxp</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, icm20948dataconverter.o(i.invn_convert_quat_mult_fxp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invn_convert_quat_mult_fxp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_mult_q30_fxp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_chip_to_body_axis_quaternion
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_convert_quat_rotate_fxp
</UL>

<P><STRONG><a name="[170]"></a>check_fifo_decoded_headers</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.check_fifo_decoded_headers))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[13f]"></a>dmp_get_fifo_all</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, icm20948mpufifocontrol.o(i.dmp_get_fifo_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dmp_get_fifo_all &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_swmirror
</UL>

<P><STRONG><a name="[140]"></a>dmp_get_fifo_length</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, icm20948mpufifocontrol.o(i.dmp_get_fifo_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_get_fifo_length &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[141]"></a>dmp_reset_fifo</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, icm20948mpufifocontrol.o(i.dmp_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_mpu_set_FIFO_RST_Diamond
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[16e]"></a>extract_sample_cnt</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, icm20948mpufifocontrol.o(i.extract_sample_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fifo_decoded_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_swmirror
</UL>

<P><STRONG><a name="[16f]"></a>get_packet_size_and_samplecnt</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, icm20948mpufifocontrol.o(i.get_packet_size_and_samplecnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_packet_size_and_samplecnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_pop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[204]"></a>inv_decode_3_16bit_elements</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_decode_3_16bit_elements))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[206]"></a>inv_decode_3_32bit_elements</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, icm20948mpufifocontrol.o(i.inv_decode_3_32bit_elements))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[221]"></a>inv_check_accelgyro_self_test</STRONG> (Thumb, 114 bytes, Stack size 52 bytes, icm20948selftest.o(i.inv_check_accelgyro_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
</UL>

<P><STRONG><a name="[1aa]"></a>inv_do_test_accelgyro</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, icm20948selftest.o(i.inv_do_test_accelgyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_do_test_accelgyro &rArr; inv_selftest_read_samples &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
</UL>

<P><STRONG><a name="[222]"></a>inv_recover_setting</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, icm20948selftest.o(i.inv_recover_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_recover_setting &rArr; inv_icm20948_setup_compass_akm &rArr; inv_icm20948_execute_read_secondary &rArr; inv_icm20948_read_secondary &rArr; inv_icm20948_write_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_mems
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_setup_compass_akm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_secondary
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_dmp_address
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
</UL>

<P><STRONG><a name="[230]"></a>inv_save_setting</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, icm20948selftest.o(i.inv_save_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_save_setting &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
</UL>

<P><STRONG><a name="[1ab]"></a>inv_selftest_read_samples</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, icm20948selftest.o(i.inv_selftest_read_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_selftest_read_samples &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[220]"></a>inv_setup_selftest</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, icm20948selftest.o(i.inv_setup_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_setup_selftest &rArr; inv_save_setting &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sleep_us
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_run_selftest
</UL>

<P><STRONG><a name="[22b]"></a>DmpDriver_convertion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20948setup.o(i.DmpDriver_convertion))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_matrix
</UL>

<P><STRONG><a name="[22f]"></a>inv_icm20948_is_streamed_sensor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, icm20948setup.o(i.inv_icm20948_is_streamed_sensor))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_updateTs
</UL>

<P><STRONG><a name="[209]"></a>inv_icm20948_updateTs</STRONG> (Thumb, 422 bytes, Stack size 144 bytes, icm20948setup.o(i.inv_icm20948_updateTs))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = inv_icm20948_updateTs &rArr; inv_icm20948_fifo_swmirror &rArr; extract_sample_cnt &rArr; dmp_reset_fifo &rArr; inv_icm20948_mpu_set_FIFO_RST_Diamond &rArr; inv_icm20948_read_mems_reg &rArr; inv_icm20948_set_chip_power_state &rArr; inv_icm20948_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sensor_android_2_sensor_type
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_fifo_swmirror
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_is_streamed_sensor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[1e6]"></a>sensor_type_2_android_sensor</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, icm20948setup.o(i.sensor_type_2_android_sensor))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_set_sensor_period
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_enable_sensor
</UL>

<P><STRONG><a name="[20b]"></a>skip_sensor</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, icm20948setup.o(i.skip_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = skip_sensor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_sensor_android_2_sensor_type
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_poll_sensor
</UL>

<P><STRONG><a name="[135]"></a>check_reg_access_lp_disable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, icm20948transport.o(i.check_reg_access_lp_disable))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_ctrl_get_batch_mode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
</UL>

<P><STRONG><a name="[21f]"></a>inv_set_bank</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, icm20948transport.o(i.inv_set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_set_bank &rArr; inv_icm20948_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_reg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems_reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems_reg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_mems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_read_mems
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_icm20948_write_single_mems_reg_core
</UL>

<P><STRONG><a name="[2b5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time_sync.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_callback
</UL>

<P><STRONG><a name="[2cf]"></a>ppi_sync_timer_adjust_configure</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, time_sync.o(i.ppi_sync_timer_adjust_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ppi_sync_timer_adjust_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_enable
</UL>

<P><STRONG><a name="[4a]"></a>radio_callback</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, time_sync.o(i.radio_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = radio_callback &rArr; RADIO_IRQHandler &rArr; sync_timer_offset_compensate &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_begin_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_sync.o(i.ts_enable)
</UL>
<P><STRONG><a name="[9d]"></a>sync_timer_offset_compensate</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, time_sync.o(i.sync_timer_offset_compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sync_timer_offset_compensate &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>

<P><STRONG><a name="[2d0]"></a>sync_timer_start</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, time_sync.o(i.sync_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_enable
</UL>

<P><STRONG><a name="[2b6]"></a>timeslot_begin_handler</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, time_sync.o(i.timeslot_begin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = timeslot_begin_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_callback
</UL>

<P><STRONG><a name="[7a]"></a>ts_on_sys_evt</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, time_sync.o(i.ts_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ts_on_sys_evt &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_sync.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[2ce]"></a>update_radio_parameters</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, time_sync.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_begin_handler
</UL>

<P><STRONG><a name="[78]"></a>ble_evt_handler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usr_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[52]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[4e]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_ble.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[4f]"></a>nus_data_handler</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usr_ble.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nus_data_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[50]"></a>on_adv_evt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usr_ble.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = on_adv_evt &rArr; sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[51]"></a>on_conn_params_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_ble.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_ble.o(i.usr_ble_init)
</UL>
<P><STRONG><a name="[124]"></a>sleep_mode_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usr_ble.o(i.sleep_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[2c5]"></a>sync_timer_button_init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, usr_ble.o(i.sync_timer_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sync_timer_button_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_ble_init
</UL>

<P><STRONG><a name="[b6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
